name: LuCI编译-单应用（OpenWRT 24.10.2）

on:
  workflow_dispatch:
    inputs:
      package:
        description: '请选择要编译的 LuCI 包'
        required: true
        type: choice
        options:
          # - luci-app-hello
          - luci-app-keepalived-ha
          - luci-app-model-update
      verbose:
        description: '是否输出详细编译日志（V=s）'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  build-luci-app:
    runs-on: ubuntu-22.04
    steps:
      - name:  1️⃣ 拉取仓库代码
        uses: actions/checkout@v4

      - name:  2️⃣ 安装编译依赖
        run: |
          sudo apt update -y || true
          sudo apt install -y \
            build-essential git wget tar zstd xz-utils \
            python3 python3-dev python3-setuptools swig

      - name:  3️⃣ 动态设置要编译的包名
        run: |
          PKG_NAME="${{ github.event.inputs.package }}"

          # 如果没有输入包名，则自动查找第一个 luci-app-* 包
          if [ -z "$PKG_NAME" ]; then
            PKG_DIR=$(find "$GITHUB_WORKSPACE/" -mindepth 1 -maxdepth 1 -type d -name "luci-app-*" | head -n1)
            if [ -z "$PKG_DIR" ]; then
              echo "❌ 未在仓库目录下找到任何luci-app-*包，请检查仓库结构"; exit 1;
            fi
            PKG_NAME=$(basename "$PKG_DIR")
            echo "✅ 未输入包名，自动识别到目标包：$PKG_NAME"
          else
            echo "✅ 识别到输入的目标包：$PKG_NAME"
          fi

          echo "PKG_NAME=$PKG_NAME" >> "$GITHUB_ENV"

      - name: 4️⃣ 下载并解压 OpenWRT SDK
        run: |
          RUNNER_HOME="/home/runner"
          SDK_URL="https://downloads.openwrt.org/releases/24.10.2/targets/mediatek/filogic/openwrt-sdk-24.10.2-mediatek-filogic_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
          SDK_TAR="openwrt-sdk-24.10.2.tar.zst"
          SDK_DIR="$RUNNER_HOME/openwrt-sdk-filogic"

          mkdir -p "$SDK_DIR" && cd "$SDK_DIR"
          echo "🔍 当前SDK目录：$SDK_DIR"
          if [ ! -f "$SDK_TAR" ]; then
            wget "$SDK_URL" -O "$SDK_TAR" || { echo "❌ SDK下载失败"; exit 1; }
          fi

          # 解压SDK
          if [ ! -f "${SDK_TAR%.zst}" ]; then
            zstd -d "$SDK_TAR" || { echo "❌ ZSTD解压失败"; exit 1; }
          fi
          # 🌟 动态解压并查找文件夹名
          tar -xf "${SDK_TAR%.zst}" || { echo "❌ TAR解压失败"; exit 1; }

          # 🌟 动态查找解压后生成的目录名 (通常是唯一的一个)
          SDK_FOLDER=$(find . -maxdepth 1 -type d -name "openwrt-sdk-*" -print -quit)

          if [ -z "$SDK_FOLDER" ] || [ ! -d "$SDK_FOLDER" ]; then
            echo "❌ SDK解压后路径不存在！"; ls -l .; exit 1;
          fi

          FULL_SDK_PATH="$SDK_DIR/$SDK_FOLDER" # 动态组合完整路径
          echo "✅ SDK解压完成，路径：$FULL_SDK_PATH"
          echo "FULL_SDK_PATH=$FULL_SDK_PATH" >> "$GITHUB_ENV" # 导出到环境

      - name: 5️⃣ 复制仓库中的luci-app-xxx到SDK并初始化Feeds
        run: |
          FULL_SDK_PATH="${{ env.FULL_SDK_PATH }}" # 直接使用环境中的路径
          # 从环境变量获取动态包名
          PKG_NAME="${{ env.PKG_NAME }}"

          # 验证SDK路径
          echo "🔍 准备进入SDK路径：$FULL_SDK_PATH"
          cd "$FULL_SDK_PATH" || { echo "❌ 进入SDK目录失败"; exit 1; }

          # Feeds 优化：移除 base 仓库，只保留 packages 和 luci
          > feeds.conf.default
          echo 'src-git base https://github.com/openwrt/openwrt.git;openwrt-24.10' >> feeds.conf.default
          echo 'src-git packages https://github.com/openwrt/packages.git;master' >> feeds.conf.default
          echo 'src-git luci https://github.com/openwrt/luci.git;openwrt-24.10' >> feeds.conf.default

          ./scripts/feeds update -a || { echo "❌ Feeds更新失败"; exit 1; }
          ./scripts/feeds install -a || { echo "❌ Feeds安装失败"; exit 1; }

          echo "🔄 复制仓库中的$PKG_NAME到SDK..."
          rm -rf "package/$PKG_NAME"
          cp -r "$GITHUB_WORKSPACE/$PKG_NAME" "package/" || { echo "❌ 复制包文件失败"; exit 1; }
          echo "✅ 包文件复制完成：$PKG_NAME"

      - name: 6️⃣ 编译应用
        run: |
          FULL_SDK_PATH="${{ env.FULL_SDK_PATH }}" # 直接使用环境中的路径
          OUTPUT_DIR="/home/runner/luci-build-ipk" # 直接使用绝对路径
          PKG_NAME="${{ env.PKG_NAME }}"

          VERBOSE_FLAG=""
          if [ "${{ github.event.inputs.verbose }}" = "true" ]; then
            VERBOSE_FLAG="V=s"
          fi

          cd "$FULL_SDK_PATH" || { echo "❌ 进入SDK目录失败"; exit 1; }

          echo "CONFIG_PACKAGE_$PKG_NAME=y" >> .config
          make defconfig || { echo "❌ 配置生成失败"; exit 1; }

          make package/$PKG_NAME/clean $VERBOSE_FLAG || { echo "⚠️ 无旧产物可清理"; }
          make package/$PKG_NAME/compile $VERBOSE_FLAG -j$(nproc) || { echo "❌ 编译失败"; exit 1; }

          mkdir -p "$OUTPUT_DIR"
          ARCH_DIR=$(find "bin/packages/" -maxdepth 1 -type d ! -name "*.ipk" ! -name "packages" | head -n1)
          IPK_PATH=$(find "$ARCH_DIR/" -name "*$PKG_NAME*.ipk" | head -n1)

          if [ -z "$IPK_PATH" ]; then
            echo "❌ 未找到$PKG_NAME的IPK文件，检查 $ARCH_DIR 目录..."; ls -l "$ARCH_DIR"; exit 1;
          fi

          cp -f "$IPK_PATH" "$OUTPUT_DIR/"
          echo "✅ 编译完成！IPK路径：$OUTPUT_DIR/$(basename $IPK_PATH)"

      - name: 7️⃣ 上传编译产物
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.PKG_NAME }}-ipk"
          path: /home/runner/luci-build-ipk/${{ env.PKG_NAME }}_*.ipk
          retention-days: 30

      - name: 8️⃣ 设置当前时间
        run: |
          echo "BUILD_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S CST')" >> $GITHUB_ENV
          echo "VERSION_TAG=$(TZ='Asia/Shanghai' date '+%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: 9️⃣ 发布到 GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "${{ env.PKG_NAME }}-${{ env.VERSION_TAG }}"
          name: "${{ env.PKG_NAME }}"
          files: /home/runner/luci-build-ipk/*.ipk
          body: |
            🎉 自动编译完成！
            包名：${{ env.PKG_NAME }}
            时间：${{ env.BUILD_TIME }}
