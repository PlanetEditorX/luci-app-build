name: LuCI编译-Matrix（OpenWRT 24.10.2）

on:
  workflow_dispatch:
    inputs:
      verbose:
        description: '是否输出详细编译日志（V=s）'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
  # push:
  #   paths:
  #     - 'luci-app-*/**'

jobs:
  detect:
    runs-on: ubuntu-22.04
    outputs:
      matrix: ${{ steps.set-matrix.outputs.pkg_matrix }}
    steps:
      - name: 1️⃣ Checkout 仓库
        uses: actions/checkout@v4

      - name: 2️⃣ 识别 luci-app-* 包并设置 Matrix
        id: set-matrix
        run: |
          echo "📦 正在识别 luci-app-* 包..."
          # 查找所有直接子目录下的 luci-app-* 文件夹
          PKG_LIST=$(find . -maxdepth 1 -type d -name "luci-app-*")
          MATRIX_JSON="{\"pkg\":["

          FIRST=true
          for PKG in $PKG_LIST; do
            PKG_NAME=$(basename "$PKG")
            if [ "$PKG_NAME" = "luci-app-hello" ]; then
              echo "🚫 跳过默认包：$PKG_NAME"
              continue
            fi
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              MATRIX_JSON+=","
            fi
            MATRIX_JSON+="\"$PKG_NAME\""
          done
          MATRIX_JSON+="]}"
          echo "✅ Matrix JSON: $MATRIX_JSON"
          echo "pkg_matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  build:
    needs: detect
    runs-on: ubuntu-22.04
    strategy:
      matrix: ${{ fromJson(needs.detect.outputs.matrix) }}
    name: 编译 ${{ matrix.pkg }}
    steps:
      - name: 1️⃣ Checkout 仓库
        uses: actions/checkout@v4

      - name: 2️⃣ 安装编译依赖
        run: |
          sudo apt update -y || true
          sudo apt install -y \
            build-essential git wget tar zstd xz-utils \
            python3 python3-dev python3-setuptools swig

      - name: 3️⃣ 下载并解压 OpenWRT SDK (动态路径查找)
        id: sdk-setup
        run: |
          RUNNER_HOME="/home/runner"
          SDK_URL="https://downloads.openwrt.org/releases/24.10.2/targets/mediatek/filogic/openwrt-sdk-24.10.2-mediatek-filogic_gcc-13.3.0_musl.Linux-x86_64.tar.zst"
          SDK_TAR="openwrt-sdk-24.10.2.tar.zst"
          SDK_DIR="$RUNNER_HOME/openwrt-sdk-filogic"

          mkdir -p "$SDK_DIR" && cd "$SDK_DIR"
          echo "🔍 当前SDK目录：$SDK_DIR"

          # 下载
          if [ ! -f "$SDK_TAR" ]; then
            wget "$SDK_URL" -O "$SDK_TAR" || { echo "❌ SDK下载失败"; exit 1; }
          fi

          # 解压 .zst
          if [ ! -f "${SDK_TAR%.zst}" ]; then
            zstd -d "$SDK_TAR" || { echo "❌ ZSTD解压失败"; exit 1; }
          fi
          # 解压 .tar
          tar -xf "${SDK_TAR%.zst}" || { echo "❌ TAR解压失败"; exit 1; }

          # 动态查找解压后生成的目录名
          SDK_FOLDER=$(find . -maxdepth 1 -type d -name "openwrt-sdk-*" -print -quit)

          if [ -z "$SDK_FOLDER" ] || [ ! -d "$SDK_FOLDER" ]; then
            echo "❌ SDK解压后路径不存在！"; ls -l .; exit 1;
          fi

          FULL_SDK_PATH="$SDK_DIR/$SDK_FOLDER"
          echo "✅ SDK解压完成，路径：$FULL_SDK_PATH"
          echo "FULL_SDK_PATH=$FULL_SDK_PATH" >> "$GITHUB_ENV" # 导出到环境

      - name: 4️⃣ 编译 ${{ matrix.pkg }}
        run: |
          FULL_SDK_PATH="${{ env.FULL_SDK_PATH }}"
          # 每个包的输出目录独立，避免冲突
          OUTPUT_DIR="/home/runner/luci-build-ipk/${{ matrix.pkg }}"
          PKG_NAME="${{ matrix.pkg }}"

          VERBOSE_FLAG=""
          if [ "${{ github.event.inputs.verbose }}" = "true" ]; then
            VERBOSE_FLAG="V=s"
          fi

          cd "$FULL_SDK_PATH" || { echo "❌ 进入SDK目录失败"; exit 1; }

          # 🌟 Feeds 配置：恢复 base feed 以确保依赖完整
          > feeds.conf.default
          echo 'src-git base https://github.com/openwrt/openwrt.git;openwrt-24.10' >> feeds.conf.default
          echo 'src-git packages https://github.com/openwrt/packages.git;master' >> feeds.conf.default
          echo 'src-git luci https://github.com/openwrt/luci.git;openwrt-24.10' >> feeds.conf.default

          ./scripts/feeds update -a || { echo "❌ Feeds更新失败"; exit 1; }
          ./scripts/feeds install -a || { echo "❌ Feeds安装失败"; exit 1; }

          # 复制应用包
          mkdir -p "$OUTPUT_DIR"
          cp -r "$GITHUB_WORKSPACE/$PKG_NAME" package/

          # 配置
          echo "CONFIG_PACKAGE_$PKG_NAME=y" >> .config
          make defconfig || { echo "❌ 配置生成失败"; exit 1; }

          # 编译
          make package/$PKG_NAME/clean $VERBOSE_FLAG || echo "⚠️ 无旧产物"
          make package/$PKG_NAME/compile $VERBOSE_FLAG -j$(nproc) || { echo "❌ 编译失败"; exit 1; } # 🌟 使用并行编译

          # 查找并复制 IPK
          ARCH_DIR=$(find "bin/packages/" -maxdepth 1 -type d ! -name "*.ipk" ! -name "packages" | head -n1)
          IPK_PATH=$(find "$ARCH_DIR/" -name "*$PKG_NAME*.ipk" | head -n1)

          if [ -z "$IPK_PATH" ]; then
            echo "❌ 未找到 $PKG_NAME 的 IPK 文件！"; ls -l "$ARCH_DIR"; exit 1;
          fi

          cp -f "$IPK_PATH" "$OUTPUT_DIR/"
          echo "✅ 编译完成！IPK路径：$OUTPUT_DIR/$(basename $IPK_PATH)"

      - name: 5️⃣ 上传 IPK 产物
        uses: actions/upload-artifact@v4
        with:
          # 上传 Artifact 名称使用包名，以便 Release Job 区分下载
          name: ${{ matrix.pkg }}-ipk
          # 路径指向独立输出目录下的 IPK 文件
          path: /home/runner/luci-build-ipk/${{ matrix.pkg }}/*.ipk
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: 1️⃣ 下载所有 IPK 产物
        uses: actions/download-artifact@v4
        with:
          # 下载到 /home/runner/all-ipks，结构为 all-ipks/<pkg_name>-ipk/*.ipk
          path: /home/runner/all-ipks

      - name: 2️⃣ 设置当前时间
        run: |
          echo "BUILD_TIME=$(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S CST')" >> $GITHUB_ENV
          echo "VERSION_TAG=$(TZ='Asia/Shanghai' date '+%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: 3️⃣ 生成包列表
        run: |
          # 查找所有子目录（即 Artifacts 的名称）并格式化为列表
          PKG_NAMES=$(find /home/runner/all-ipks -mindepth 1 -maxdepth 1 -type d | sed 's/.*\///' | sed 's/-ipk$//' | tr '\n' ',' | sed 's/,$//')
          echo "PKG_NAMES=$PKG_NAMES" >> $GITHUB_ENV

      - name: 4️⃣ 发布到 GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "all-build-${{ env.VERSION_TAG }}"
          name: "自动编译 LuCI 应用包"
          # files 必须使用通配符来匹配所有子目录中的所有 IPK 文件
          files: /home/runner/all-ipks/**/*.ipk
          body: |
            🎉 所有包编译完成！
            包列表：${{ env.PKG_NAMES }}
            时间：${{ env.BUILD_TIME }}